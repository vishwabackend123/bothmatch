// --------------------------------------------------
// Flexbox SASS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------

// Flexbox display
@mixin flexbox() {
  display: -ms-flexbox;
  display: flex;
  @include flex-wrap(wrap);
}
@mixin flexbox-display($displays) {
  @if $displays == block {
    display: -ms-flexbox;
    display: flex;
  }
  @else if $displays == inline-flex {
    display: -ms-inline-flexbox;
    display: inline-flex;
  }
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($grow,$shrink,$basis) {
  -ms-flex: $grow $shrink $basis;
      flex: $grow $shrink $basis;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
  -ms-flex-direction: $direction;
      flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
  -ms-flex-wrap: $wrap;
      flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
  -ms-flex-flow: $flow;
      flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($val) {
  -ms-flex-order: $val;
           order: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow) {
  -ms-flex-positive: $grow;
          flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number> 
@mixin flex-shrink($shrink) {
  -ms-flex-negative: $shrink;
        flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width> 
@mixin flex-basis($width) {
  -ms-flex-basis: $width;
      flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around 
@mixin justify-content($jc-displays) {
  @if $jc-displays == start {
      -ms-flex-pack: start;
    justify-content: flex-start;
  }
  @else if $jc-displays == end {
      -ms-flex-pack: end;
    justify-content: flex-end;
  }
  @else if $jc-displays == center {
      -ms-flex-pack: center;
    justify-content: center;
  }
  @else if $jc-displays == between {
      -ms-flex-pack: justify;
    justify-content: space-between;
  }
  @else if $jc-displays == around {
      -ms-flex-pack: distribute;
    justify-content: space-around;
  }
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch 
@mixin align-content($ac-displays) {
  @if $ac-displays == start {
    -ms-flex-line-pack: start;
         align-content: flex-start;
  }
  @else if $ac-displays == end {
    -ms-flex-line-pack: end;
         align-content: flex-end;
  }
  @else if $ac-displays == center {
    -ms-flex-line-pack: center;
         align-content: center;
  }
  @else if $ac-displays == between {
    -ms-flex-line-pack: justify;
         align-content: space-between;
  }
  @else if $ac-displays == around {
    -ms-flex-line-pack: distribute;
         align-content: space-around;
  }
  @else if $ac-displays == stretch {
    -ms-flex-line-pack: stretch;
         align-content: stretch;
  }
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch 
@mixin align-items($ai-displays) {
  @if $ai-displays == start {
    -ms-flex-align: start;
       align-items: flex-start;
  }
  @else if $ai-displays == end {
    -ms-flex-align: end;
       align-items: flex-end;
  }
  @else if $ai-displays == center {
    -ms-flex-align: center;
       align-items: center;
  }
  @else if $ai-displays == baseline {
    -ms-flex-align: baseline;
       align-items: baseline;
  }
  @else if $ai-displays == stretch {
    -ms-flex-align: stretch;
       align-items: stretch;
  }
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch 
@mixin align-self($as-displays) {
  @if $as-displays == auto {
             align-self: auto;
    -ms-flex-item-align: auto;
  }
  @else if $as-displays == start {
             align-self: start;
    -ms-flex-item-align: flex-start;
  }
  @else if $as-displays == end {
             align-self: end;
    -ms-flex-item-align: flex-end;
  }
  @else if $as-displays == center {
             align-self: center;
    -ms-flex-item-align: center;
  }
  @else if $as-displays == baseline {
             align-self: baseline;
    -ms-flex-item-align: baseline;
  }
  @else if $as-displays == stretch {
             align-self: stretch;
    -ms-flex-item-align: stretch;
  }
}
// FlexBox Wrap
@mixin flex-align($alignment) {
  @include flexbox();
  @if $alignment == vCenter {
    @include align-items(center);
  }
  @else if $alignment == hCenter {
    @include justify-content(center);
  }
  @else if $alignment == vhCenter {
    @include align-items(center);
    @include justify-content(center);
  }
  @else if $alignment == vBottom {
    @include align-items(end);
  }
  @else if $alignment == vBtmHCntr {
    @include align-items(end);
    @include justify-content(center);
  }
  @else if $alignment == vCenHRight {
    @include align-items(center);
    @include justify-content(end);
  }
  @else if $alignment == vhEnd {
    @include align-items(end);
    @include justify-content(end);
  }
  @else if $alignment == hRight {
    @include justify-content(end);
  }
}